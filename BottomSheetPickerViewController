protocol BottomSheetPickerDelegate: AnyObject {
    func didSelectItem(_ item: String)
    func didTapDone()
}

class BottomSheetPickerViewController: UIViewController {
    weak var delegate: BottomSheetPickerDelegate?
    var selectedItem = ""
    var itemArr = [String]()
    var titleFont: UIFont?
    var pickerItemFont: UIFont?
    var buttonFont: UIFont?
    var selectedPickerItemFont: UIFont?
    
    private let backgroundView: UIView = {
        let view = UIView()
        view.backgroundColor = UIColor(hex: 0x282424)
        view.layer.cornerRadius = 20
        view.layer.maskedCorners = [.layerMinXMinYCorner, .layerMaxXMinYCorner]
        return view
    }()
    
    private let titleLabel: UILabel = {
        let label = UILabel()
        label.text = "Select an Option"
        label.textAlignment = .center
        label.textColor = .white
        return label
    }()
    
    private let pickerView: UIPickerView = {
        let picker = UIPickerView()
        picker.tintColor = .white
        return picker
    }()
    
    private let doneButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("Done", for: .normal)
        button.backgroundColor = UIColor(hex: 0x006FFD)
        button.setTitleColor(.white, for: .normal)
        button.addTarget(self, action: #selector(doneButtonTapped), for: .touchUpInside)
        return button
    }()
    
    init(items: [String], titleFont: UIFont? = nil, pickerItemFont: UIFont? = nil, buttonFont: UIFont? = nil, title: String? = "Select an Option", selectedPickerItemFont: UIFont? = nil) {
        super.init(nibName: nil, bundle: nil)
        self.itemArr = items
        
        self.modalPresentationStyle = .overFullScreen
        self.pickerView.delegate = self
        self.pickerView.dataSource = self
        self.titleFont = titleFont
        self.pickerItemFont = pickerItemFont
        self.buttonFont = buttonFont
        self.titleLabel.text = title
        self.selectedPickerItemFont = selectedPickerItemFont
        
        view.addSubview(backgroundView)
        backgroundView.addSubview(titleLabel)
        backgroundView.addSubview(pickerView)
        backgroundView.addSubview(doneButton)
        
        // Configure constraints for the subviews (backgroundView, titleLabel, pickerView, doneButton)
        backgroundView.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            backgroundView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            backgroundView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            backgroundView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            backgroundView.heightAnchor.constraint(equalToConstant: 350)
            // You can set a specific height for the backgroundView if needed
        ])
        
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            titleLabel.topAnchor.constraint(equalTo: backgroundView.topAnchor, constant: 16),
            titleLabel.centerXAnchor.constraint(equalTo: backgroundView.centerXAnchor),
        ])
        
        pickerView.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            pickerView.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 8),
            pickerView.leadingAnchor.constraint(equalTo: backgroundView.leadingAnchor),
            pickerView.trailingAnchor.constraint(equalTo: backgroundView.trailingAnchor),
        ])
        
        doneButton.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            doneButton.topAnchor.constraint(equalTo: pickerView.bottomAnchor, constant: 8),
            doneButton.leadingAnchor.constraint(equalTo: backgroundView.leadingAnchor, constant: 16),
            doneButton.trailingAnchor.constraint(equalTo: backgroundView.trailingAnchor, constant: -16),
            doneButton.bottomAnchor.constraint(equalTo: backgroundView.bottomAnchor, constant: -32),
            doneButton.heightAnchor.constraint(equalToConstant: 48), // Adjust the height as needed
        ])
        doneButton.layer.cornerRadius = 12
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.updateFont()
        
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        
        // Update subview frames or constraints if needed
    }
    
    func updateFont() {
        titleLabel.font = titleFont ?? UIFont.boldSystemFont(ofSize: 18)
        titleLabel.textColor = .white
        
        // Apply custom font to picker view elements
        let pickerViewSubViews = pickerView.subviews.compactMap { $0 as? UILabel }
        pickerViewSubViews.forEach { $0.font = pickerItemFont ?? UIFont.systemFont(ofSize: 16) }
        
        doneButton.titleLabel?.font = buttonFont ?? UIFont.boldSystemFont(ofSize: 16)

    }
    
    @objc private func doneButtonTapped() {
        delegate?.didSelectItem(selectedItem)
        delegate?.didTapDone()
        
        dismiss(animated: true, completion: nil)
    }
}

extension BottomSheetPickerViewController: UIPickerViewDelegate, UIPickerViewDataSource {
    // Implement UIPickerViewDelegate and UIPickerViewDataSource methods here

    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1 // Assuming you have a single column in the picker
    }

    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        // Return the number of rows based on your data source
        return itemArr.count
    }

    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        // Return the title for each row based on your data source
        return itemArr[row]
    }

    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        // Handle row selection
        self.selectedItem = itemArr[row]
        pickerView.reloadAllComponents()

    }
    
    
    func pickerView(_ pickerView: UIPickerView, viewForRow row: Int, forComponent component: Int, reusing view: UIView?) -> UIView {
        let label = UILabel()
        label.text = itemArr[row]
        label.textAlignment = .center
        pickerView.subviews[0].subviews[0].subviews[2].backgroundColor = .black

        // Customize appearance for selected row
        if row == pickerView.selectedRow(inComponent: component) {
            label.textColor = UIColor(hex: 0xFFFFF2)
            label.font = selectedPickerItemFont ?? UIFont.boldSystemFont(ofSize: 16)
        } else {
            label.textColor = UIColor(hex: 0x8F9098)
            label.font = pickerItemFont ?? UIFont.systemFont(ofSize: 12)
        }

        return label
    }
}
